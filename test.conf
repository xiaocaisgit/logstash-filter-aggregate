input{
    redis {
    host => ["10.10.12.223"]
    port => 6379
    data_type => "list"
    db => 0
    key => "safenumber"
    batch_count => 20
    }


}
filter{
    grok{
    patterns_dir => ["/opt/elk/logstash/pattern.cvtt"]
    match => {"message" => "%{TIMESTAMP_ISO8601:time} \[%{LOGLEVEL:loglevel} \] - seqid=%{NOTSPACE:seqid},%{WORD:action}=%{JAVALOGMESSAGE:body} \@%{NOTSPACE:javaclass}"}
    remove_field => ["message","javaclass"]
    }

    if [action] == "request" {
        aggregate{
        task_id => "%{seqid}"
        code => "
            map['request_time'] = event.get('time')
            map['request_body'] = event.get('body')"
        map_action => "create"
        }
    }
    if [action] != "request" or [action] != "response" or "_grokparsefailure" in [tags] {
    drop {}
    }
    if [action] == "response" {
        aggregate{
        task_id => "%{seqid}"
        code => "
            map['response_time'] = event.get('time')
            event.set('response_time',map['response_time'])
            event.set('request_time',map['request_time'])
            event.set('request_body',map['request_body'])"
        remove_field => ['time']
        map_action => "update"
        end_of_task => true
        timeout => 180
        push_map_as_event_on_timeout => true
	timeout_task_id_field => "seqid"
        timeout_tags => ['_aggregatetimeout']
        }
   } 
   if [action] == "request" and "_aggregatetimeout" not in [tags]{
   drop {} 
   }
}
output{
   if "_aggregatetimeout" not in [tags]{
       file {
       path => "/opt/elk/logstash/output.txt"
       }
   }
  else {
      file {
      path => "/opt/elk/logstash/output.err"
      }
  }
   
}

